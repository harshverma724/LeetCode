# Maximum Count of Positive and Negative Integers

This repository contains a solution to the LeetCode problem **2529. Maximum Count of Positive Integer and Negative Integer**.

## Problem Statement
Given an array `nums` sorted in non-decreasing order, return the maximum between the number of positive integers and the number of negative integers.

In other words, if the number of positive integers in `nums` is `pos` and the number of negative integers is `neg`, then return the maximum of `pos` and `neg`.

**Note:** `0` is neither positive nor negative.

### Example 1:
**Input:** `nums = [-2,-1,-1,1,2,3]`  
**Output:** `3`  
**Explanation:** There are `3` positive integers and `3` negative integers. The maximum count among them is `3`.

### Example 2:
**Input:** `nums = [-3,-2,-1,0,0,1,2]`  
**Output:** `3`  
**Explanation:** There are `2` positive integers and `3` negative integers. The maximum count among them is `3`.

### Example 3:
**Input:** `nums = [5,20,66,1314]`  
**Output:** `4`  
**Explanation:** There are `4` positive integers and `0` negative integers. The maximum count among them is `4`.

---

## Constraints
- `1 <= nums.length <= 2000`
- `-10^5 <= nums[i] <= 10^5`
- `nums` is sorted in **non-decreasing** order.

---

## Solution
The solution iterates through the array and counts the number of positive and negative numbers, returning the maximum count.

### Code Implementation
```java
class Solution {
    public int maximumCount(int[] nums) {
        int positiveCount = 0, negativeCount = 0;

        for (int num : nums) {
            if (num > 0) {
                positiveCount++;
            } else if (num < 0) {
                negativeCount++;
            }
        }

        return Math.max(positiveCount, negativeCount);
    }
}
```

---

## Explanation
### Algorithm
1. **Initialize Counters:** Start with `positiveCount` and `negativeCount` set to `0`.
2. **Iterate Through Array:** Traverse the array and count the positive and negative numbers.
3. **Return Maximum Count:** Compare the counts and return the larger value.

### Complexity Analysis
- **Time Complexity:** `O(n)`, where `n` is the length of `nums` (since we traverse the array once).
- **Space Complexity:** `O(1)`, as we use only two integer variables.

---

## How to Run
1. Clone the repository:
```bash
git clone https://github.com/your-username/maximum-count-numbers.git
```
2. Navigate to the project directory:
```bash
cd maximum-count-numbers
```
3. Compile and run the code:
```bash
javac Solution.java
java Solution
```

---

## Contribution
Feel free to fork the repository, open an issue, or submit a pull request for improvements and additional features.

---
