# Leetcode Problem 3306: Count of Substrings Containing Every Vowel and K Consonants II

## Problem Description

You are given a string `word` and a non-negative integer `k`.

**Goal:** Return the total number of substrings that contain **every vowel** ('a', 'e', 'i', 'o', 'u') at least once and exactly `k` consonants.

---

## Examples

### Example 1
```
Input: word = "aeioqq", k = 1
Output: 0
Explanation: There is no substring with every vowel.
```

### Example 2
```
Input: word = "aeiou", k = 0
Output: 1
Explanation: The only valid substring is "aeiou".
```

### Example 3
```
Input: word = "ieaouqqieaouqq", k = 1
Output: 3
Explanation: The valid substrings are:
1. "ieaouq"
2. "qieaou"
3. "ieaouq"
```

---

## Constraints

- \( 5 \leq 	ext{word.length} \leq 2 	imes 10^5 \)
- `word` consists only of lowercase English letters.
- \( 0 \leq k \leq 	ext{word.length} - 5 \)

---

## Approach

### Step 1 - Compute `nextConsonant` Array
- Create an array `nextConsonant[]` where `nextConsonant[i]` stores the index of the next consonant starting from index `i`.
- Traverse the string from **right to left** to fill this array efficiently.

### Step 2 - Sliding Window Technique
- Use two pointers, `start` and `end`, to expand and shrink the window.
- Track the counts of vowels using a HashMap `vowelCount` and keep a `consonantCount`.

### Step 3 - Counting Valid Substrings
- Whenever a valid substring is found, calculate the total possible valid substrings by counting the available positions based on the `nextConsonant` array.

---

## Code

```java
class Solution {

    public long countOfSubstrings(String word, int k) {
        long numValidSubstrings = 0;
        int start = 0, end = 0;

        HashMap<Character, Integer> vowelCount = new HashMap<>();
        int consonantCount = 0;

        int[] nextConsonant = new int[word.length()];
        int nextConsonantIndex = word.length();

        // Compute nextConsonant array
        for (int i = word.length() - 1; i >= 0; i--) {
            nextConsonant[i] = nextConsonantIndex;
            if (!isVowel(word.charAt(i))) {
                nextConsonantIndex = i;
            }
        }

        // Sliding window technique
        while (end < word.length()) {
            char newLetter = word.charAt(end);

            if (isVowel(newLetter)) {
                vowelCount.put(newLetter, vowelCount.getOrDefault(newLetter, 0) + 1);
            } else {
                consonantCount++;
            }

            while (consonantCount > k) {
                char startLetter = word.charAt(start);
                if (isVowel(startLetter)) {
                    vowelCount.put(startLetter, vowelCount.get(startLetter) - 1);
                    if (vowelCount.get(startLetter) == 0) {
                        vowelCount.remove(startLetter);
                    }
                } else {
                    consonantCount--;
                }
                start++;
            }

            while (start < word.length() && vowelCount.size() == 5 && consonantCount == k) {
                numValidSubstrings += nextConsonant[end] - end;
                char startLetter = word.charAt(start);
                if (isVowel(startLetter)) {
                    vowelCount.put(startLetter, vowelCount.get(startLetter) - 1);
                    if (vowelCount.get(startLetter) == 0) {
                        vowelCount.remove(startLetter);
                    }
                } else {
                    consonantCount--;
                }
                start++;
            }
            end++;
        }

        return numValidSubstrings;
    }

    private boolean isVowel(char c) {
        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
    }
}
```

---

## Complexity Analysis

| Complexity | Value |
|-------------|--------|
| **Time Complexity** | `O(n)` |
| **Space Complexity** | `O(n)` (for `nextConsonant[]` array and HashMap) |

- The sliding window efficiently traverses the entire string in linear time.
- The `nextConsonant` array and HashMap provide efficient checks to maintain valid substrings.

---

## Key Takeaways
✅ Efficient use of Sliding Window technique.  
✅ Tracks both vowels and consonants dynamically.  
✅ Optimized for large inputs within constraints.  

