# Minimum Operations to Make Binary Array Elements Equal to One I (LeetCode 3191)

## Problem Statement
You are given a **binary array** `nums`.

You can perform the following operation **any number of times**:
- Choose any **three consecutive elements** and **flip** all of them.
  - Flipping means changing `0` to `1` and `1` to `0`.

Return the **minimum number of operations** required to make **all elements equal to 1**.
- If it is **impossible**, return `-1`.

### Example 1:
```plaintext
Input: nums = [0,1,1,1,0,0]
Output: 3

Explanation:
1. Flip indices [0,1,2] ‚Üí nums = [1,0,0,1,0,0]
2. Flip indices [1,2,3] ‚Üí nums = [1,1,1,0,0,0]
3. Flip indices [3,4,5] ‚Üí nums = [1,1,1,1,1,1]
```

### Example 2:
```plaintext
Input: nums = [0,1,1,1]
Output: -1

Explanation:
It is impossible to make all elements equal to 1.
```

### Constraints:
- `3 <= nums.length <= 10^5`
- `nums[i]` is either `0` or `1`.

---

## Solution: Greedy + Queue (O(n))

### Approach:
- Use a **queue** (`flipQueue`) to track the indices of the flip operations.
- Traverse the array and determine when flips are needed.
- If an element should be `1`, but isn't, perform a flip.
- If the last possible flip index exceeds array bounds, return `-1`.

### Code Implementation (Java)
```java
import java.util.*;

class Solution {
    public int minOperations(int[] nums) {
        Deque<Integer> flipQueue = new ArrayDeque<>();
        int count = 0;

        for (int i = 0; i < nums.length; i++) {
            // Remove flips that are out of range (>2 distance from current index)
            while (!flipQueue.isEmpty() && i > flipQueue.peekFirst() + 2) {
                flipQueue.pollFirst();
            }

            // If bit is 0 and needs flipping based on parity of flipQueue
            if ((nums[i] + flipQueue.size()) % 2 == 0) {
                if (i + 2 >= nums.length) {
                    return -1; // Cannot flip last elements
                }
                count++;
                flipQueue.offerLast(i); // Record the flip index
            }
        }
        return count;
    }
}
```

### Time Complexity:
- **O(n)** ‚Üí Each element is processed at most twice.

### Space Complexity:
- **O(n)** in the worst case due to the queue.

---

## Summary
‚úÖ **Greedy approach using a queue ensures optimal flipping strategy.**
‚úÖ **Time complexity is O(n), much better than brute force.**
‚úÖ **Space complexity is O(n) in the worst case.**
‚úÖ **Returns `-1` if making all elements `1` is impossible.**

---
### üöÄ If you found this helpful, give it a ‚≠ê on GitHub!

