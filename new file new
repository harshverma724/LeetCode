# Longest Nice Subarray (LeetCode 2401)

## Problem Statement
You are given an array `nums` consisting of positive integers.

A subarray of `nums` is called **nice** if the bitwise **AND** of every pair of elements in different positions in the subarray is **0**.

Return the length of the **longest nice subarray**.

A subarray is a contiguous part of an array. Note that subarrays of length `1` are always considered nice.

### Example 1:
```plaintext
Input: nums = [1,3,8,48,10]
Output: 3
Explanation: The longest nice subarray is [3,8,48]. This subarray satisfies:
- 3 & 8 = 0
- 3 & 48 = 0
- 8 & 48 = 0
```

### Example 2:
```plaintext
Input: nums = [3,1,5,11,13]
Output: 1
Explanation: The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen.
```

### Constraints:
- `1 <= nums.length <= 10^5`
- `1 <= nums[i] <= 10^9`

---

## Solution 1: Binary Search + Checking (O(n log n))
### Approach:
- Use **binary search** to find the maximum possible length of a nice subarray.
- For each mid-length, check if a nice subarray of that length exists.
- This checking is done by iterating through all possible subarrays of that length.

### Code Implementation (Java)
```java
class Solution {
    public int longestNiceSubarray(int[] nums) {
        // Binary search for the longest nice subarray length
        int left = 0, right = nums.length;
        int result = 1; // Minimum answer is 1 (as subarrays of length 1 are always nice)

        while (left <= right) {
            int length = left + (right - left) / 2;
            if (canFormNiceSubarray(length, nums)) {
                result = length; // Update the result
                left = length + 1; // Try to find a longer subarray
            } else {
                right = length - 1; // Try a shorter length
            }
        }
        return result;
    }

    private boolean canFormNiceSubarray(int length, int[] nums) {
        if (length <= 1) return true; // Subarray of length 1 is always nice

        // Try each possible starting position for subarray of given length
        for (int start = 0; start <= nums.length - length; ++start) {
            int bitMask = 0; // Tracks the bits used in the current subarray
            boolean isNice = true;

            // Check if the subarray starting at 'start' with 'length' elements is nice
            for (int pos = start; pos < start + length; ++pos) {
                // If current number shares any bits with existing mask,
                // the subarray is not nice
                if ((bitMask & nums[pos]) != 0) {
                    isNice = false;
                    break;
                }
                bitMask |= nums[pos]; // Add current number's bits to the mask
            }

            if (isNice) return true; // Found a nice subarray of the specified length
        }
        return false; // No nice subarray of the given length exists
    }
}
```

### Time Complexity:
- **O(n log n)** → Due to binary search and checking subarrays.

### Space Complexity:
- **O(1)** → Uses only a few integer variables.

---

## Solution 2: Optimized Sliding Window (O(n))
### Key Idea:
- Use a **sliding window** approach with two pointers (`left` and `right`).
- Maintain a **bitmask** to track the bitwise OR of all elements in the current window.
- Expand the `right` boundary and check if adding `nums[right]` keeps the subarray "nice".
- If not, move the `left` pointer to shrink the window until it is valid again.
- Keep track of the **maximum window size**.

### Code Implementation (Java)
```java
class Solution {
    public int longestNiceSubarray(int[] nums) {
        int left = 0, bitMask = 0, maxLen = 0;

        for (int right = 0; right < nums.length; right++) {
            while ((bitMask & nums[right]) != 0) {
                bitMask ^= nums[left];  // Remove left element from bitMask
                left++;                 // Move left pointer forward
            }
            bitMask |= nums[right];  // Add new element to bitMask
            maxLen = Math.max(maxLen, right - left + 1);
        }
        return maxLen;
    }
}
```

### Time Complexity:
- **O(n)** → Each element is processed at most twice (once when added, once when removed).

### Space Complexity:
- **O(1)** → Uses only integer variables.

---

## Summary
✅ **Binary Search approach works in O(n log n)** but is slower than sliding window.
✅ **Optimized solution uses a sliding window for an O(n) runtime**.
✅ **Space complexity is O(1)**, using only a few integer variables.
✅ **More efficient than brute force (O(n²))**.

---

### 🚀 If you found this helpful, give it a ⭐ on GitHub!

